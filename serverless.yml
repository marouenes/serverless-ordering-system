service: ordering-system

# DEPRECATED 
plugins:
  - serverless-pseudo-parameters

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

# Disable deprecation error codes *( IT IS JUST A TEST )*
# disabledDeprecations:
#  # - CODE_1 # To disable specific deprecation with code "CODE_1"
#  - "*" # To disable all deprecation messages

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  iam:
    role:
#      $ref: ./iamRoleStatements.json
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
        Resource:
#         - arn:aws:dynamobd:#{AWS::Region}:#{AWS::AccountId}:table/ordersTable
          { "Fn::Join" : ["", ["arn:aws:dynamodb::table/ordersTable:", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
      - Effect: "Allow"
        Action: 
          - "kinesis:PutRecord"
        Resource:
          { "Fn::Join" : ["", ["arn:aws:kinesis::streams/order-events:", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#         - arn:arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:streams/order-events
      - Effect: "Allow"
        Actiion:
          - ses:SendEmail
        Resource:
          - "*"
        Condition:
          StringEquals: 
            ses:FromAddress:
              - ordering-system@grr.la

functions:
  createOrder:
    handler: handler.createOrder
    events:
      - httpApi:
          path: /order
          method: post
    environment:
      orderTableName: ordersTable
      orderStreamName: order-events
  orderFulfillement:
    handler: handler.orderFulfillement
    events:
      - http:
          path: /order/fulfill
          method: post          
    environment:
      orderTableName: ordersTable
      orderStreamName: order-events
  notifyProducer:
    handler: handler.notfiyProducer
    events:
      - stream:
          { "Fn::Join" : ["", ["arn:aws:kinesis::streams/order-events:", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#         - arn:arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:streams/order-events
    environment:
      region: ${self:provider.region}
      producerEmail: producer@grr.la
      orderingSystemEmail: ordering-system@grr.la

# CLoudFormation Template code:
resources:
  Resources:
    orderEventsStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: order-events
        ShardCount: 1
    orderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ordersTable
        AttributeDefinitions:
          - AttributeName: "orderId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "orderId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST    